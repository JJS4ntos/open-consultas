{"version":3,"sources":["pages/Home/Home.tsx","pages/Home/index.tsx","reportWebVitals.ts","index.tsx"],"names":["ResultContainer","styled","div","MatchedWord","span","TextArea","textarea","Button","button","TitleContainer","Paragraph","p","LoadContainer","Spinner","PropagateLoader","MatchCount","blockElements","animator","content","panel","label","Home","useState","question","setQuestion","diseases","setDiseases","loading","setLoading","placeholder","onChange","event","target","value","onClick","length","fetch","method","headers","body","JSON","stringify","then","result","json","diseasesResult","catch","e","console","log","alert","className","name","map","item","index","disease_name","match_count","symptoms","symptom","matches","component","word","reactStringReplace","RegExp","match","i","renderDiseaseSymptom","match_words","renderDiseases","size","color","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","require","config","ReactDOM","render","document","getElementById"],"mappings":"m5DAGO,IAAMA,EAAkBC,IAAOC,IAAV,KAKfC,EAAcF,IAAOG,KAAV,KAIXC,EAAWJ,IAAOK,SAAV,KAcRC,EAASN,IAAOO,OAAV,KAiBNC,EAAiBR,IAAOC,IAAV,KAKdQ,EAAYT,IAAOU,EAAV,KAITC,EAAgBX,IAAOC,IAAV,KAYbW,EAAUZ,YAAOa,IAAPb,CAAH,KAIPc,EAAad,IAAOG,KAAV,KCzCjBY,EAAgB,CAClBC,SAAU,qBACVC,QAAS,oBACTC,MAAO,kBACPC,MAAO,mBA+GIC,EA5GF,WAAO,IAAD,EACiBC,mBAAS,IAD1B,mBACRC,EADQ,KACEC,EADF,OAEiBF,qBAFjB,mBAERG,EAFQ,KAEEC,EAFF,OAGeJ,oBAAS,GAHxB,mBAGRK,EAHQ,KAGCC,EAHD,KA+Ef,OACI,gCACI,eAACnB,EAAD,WACI,6EACA,cAACC,EAAD,uMAKJ,cAACL,EAAD,CAAUwB,YAAY,+BAA+BC,SAAU,SAACC,GAAD,OAAWP,EAAYO,EAAMC,OAAOC,WAE9FN,GAAW,cAACpB,EAAD,CAAQ2B,QArFX,WACbX,EAASY,OAAS,GAClBP,GAAW,GACXQ,MAAM,GAAD,OAxBJ,yCAwBI,aAAqB,CACtBC,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBlB,eAGPmB,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAG,GACFnB,EAAYmB,GACZjB,GAAW,MAEdkB,OAAM,SAAAC,GACHnB,GAAW,GACXoB,QAAQC,IAAIF,OAGhBG,MAAM,gDA8DU,4CA9CD,SAACzB,GACpB,OAAIA,EAMA,cAACzB,EAAD,UACI,cAAC,aAAD,CAAYgB,cAAeA,EAAemC,UAAU,OAAOC,KAAK,OAAhE,SAEQ3B,EAAS4B,KAAI,SAACC,EAAMC,GAAP,OACT,eAAC,WAAD,WACI,eAAC,WAAD,WACMD,EAAKE,aACP,eAACzC,EAAD,iCACyBuC,EAAKG,kBAGlC,cAAC,aAAD,UACI,6BAEQH,EAAKI,SAASL,KAAI,SAACM,EAASJ,GAAV,OAjC7B,SAACA,EAAeI,EAAiBC,GAC1D,IADgF,EAC5EC,EAAiBF,EAD2D,cAE7DC,GAF6D,IAEhF,IAAI,EAAJ,qBAA6B,CAAC,IAAnBE,EAAkB,QACzBD,EAAYE,IAAmBF,EAAW,IAAIG,OAAJ,cAAkBF,EAAlB,QAA8B,OAAO,SAACG,EAAOC,GAAR,OAC3E,cAAC/D,EAAD,UAAsB8D,GAAJC,OAJsD,8BAOhF,OAAQ,6BACKL,GADIN,GA2BuBY,CAAqBZ,EAAOI,EAASL,EAAKc,sBAX/Cb,UAR3B,6FAgDAc,CAAe5C,GAEnB,cAACb,EAAD,UACI,cAACC,EAAD,CACIyD,KAAM,GACNC,MAAO,UACP5C,QAASA,UCzHd6C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCJdO,EAAQ,IAAUC,SAElBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bf35ba52.chunk.js","sourcesContent":["import styled from 'styled-components'\nimport PropagateLoader from \"react-spinners/PropagateLoader\"\n\nexport const ResultContainer = styled.div`\n    max-width: 1024px;\n    margin: 0 auto;\n`\n\nexport const MatchedWord = styled.span`\n    border-bottom: 3px solid #e7bb41;\n`\n\nexport const TextArea = styled.textarea`\n    min-height: 120px;\n    display: block;\n    margin: auto;\n    width: 70%;\n    border-radius: 5px;\n    border-color: transparent;\n    webkit-box-shadow: 0px 1px 28px 0px rgba(50,50,50,0.1);\n    -moz-box-shadow: 0px 1px 28px 0px rgba(50,50,50,0.1);\n    box-shadow: 0px 1px 28px 0px rgba(50,50,50,0.1);\n    padding: 15px 10px;\n    font-weight: bold;\n`\n\nexport const Button = styled.button`\n    display: block;\n    margin: 35px auto;\n    background: #446df6;\n    border: none;\n    padding: 15px 45px;\n    border-radius: 7px;\n    color: white;\n    font-size: 14px;\n    transition: background 0.3s;\n\n    &:hover {\n        cursor: pointer;\n        background: #ec9a29;\n    }\n`\n\nexport const TitleContainer = styled.div`\n    width: 70%;\n    margin: 0 auto;\n`\n\nexport const Paragraph = styled.p`\n    margin-bottom: 25px;\n`\n\nexport const LoadContainer = styled.div`\n    & {\n        width: auto;\n        position: relative;\n        div {\n            position: absolute;\n            left: 29%;\n            right: 0;\n        }\n    }\n`\n\nexport const Spinner = styled(PropagateLoader)`\n    margin: auto;\n`\n\nexport const MatchCount = styled.span`\n    font-size: 13px;\n    float: right;\n`","import React, { useState } from 'react'\n// @ts-ignore\nimport { Tabbordion, TabPanel, TabLabel, TabContent } from 'react-tabbordion'\nimport reactStringReplace from 'react-string-replace'\nimport '../../assets/css/styles.css';\nimport { css } from \"@emotion/core\";\nimport { \n    ResultContainer, \n    TextArea, \n    Button, \n    TitleContainer, \n    Paragraph, \n    LoadContainer,\n    Spinner,\n    MatchCount,\n    MatchedWord\n} from './Home'\n\nconst host = 'http://openconsultas-com-br.umbler.net'\n\ninterface Disease {\n    disease_name: string;\n    match_count: number;\n    symptoms: string[];\n    match_words: string[];\n}\n\nconst blockElements = {\n    animator: 'accordion-animator',\n    content: 'accordion-content',\n    panel: 'accordion-panel',\n    label: 'accordion-title'\n}\n\nconst Home = () => {\n    const [question, setQuestion] = useState('')\n    const [diseases, setDiseases] = useState<Disease[]>()\n    const [loading, setLoading] = useState(false)\n    \n    const loadDiseases = () => {\n        if( question.length > 0 ) {\n            setLoading(true)\n            fetch(`${host}/diseases`, {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    question\n                })\n            })\n            .then(result => result.json())\n            .then(diseasesResult => {\n                setDiseases(diseasesResult)\n                setLoading(false)\n            })\n            .catch(e => {\n                setLoading(false)\n                console.log(e)\n            })\n        } else {\n            alert('O campo de sintomas não pode estar vazio')\n        }\n    }\n\n    const renderDiseaseSymptom = (index: number, symptom: string, matches: string[]) => {\n        let component: any = symptom;\n        for( const word of matches ) {\n            component = reactStringReplace(component, new RegExp(`\\\\b(${word})\\\\b`, \"ig\"), (match, i) => (\n                <MatchedWord key={i}>{match}</MatchedWord>\n            ))\n        }\n        return  <li key={index}>\n                    {component}\n                </li>\n    }\n\n    const renderDiseases = (diseases: Disease[] | undefined) => {\n        if(!diseases) {\n            return (\n                <p>Nenhuma doença foi encontrada com os sintomas informados.</p>\n            )\n        }\n        return (\n            <ResultContainer>\n                <Tabbordion blockElements={blockElements} className=\"tabs\" name=\"tabs\">\n                    {\n                        diseases.map((item, index) => \n                            <TabPanel key={index}>\n                                <TabLabel>\n                                    { item.disease_name }\n                                    <MatchCount>\n                                        Itens semelhantes: { item.match_count }\n                                    </MatchCount>\n                                </TabLabel>\n                                <TabContent>\n                                    <ul>\n                                        {\n                                            item.symptoms.map((symptom, index) => \n                                                renderDiseaseSymptom(index, symptom, item.match_words)\n                                            )\n                                        }\n                                    </ul>\n                                </TabContent>\n                            </TabPanel>\n                        )\n                    }\n                </Tabbordion>\n            </ResultContainer>\n        )\n    }\n\n    return (\n        <div>\n            <TitleContainer>\n                <h1>Demonstração - Open Medical Screening</h1>\n                <Paragraph>\n                    Neste exemplo doenças serão listadas de acordo com os sintomas informados.\n                    As doenças terão ordem de quantidade de matches ( quantidade de palavras chaves encontradas ).\n                </Paragraph>\n            </TitleContainer>\n            <TextArea placeholder=\"Descreva os seus sintomas...\" onChange={(event) => setQuestion(event.target.value)}></TextArea>\n            {\n                !loading && <Button onClick={loadDiseases}>\n                                Procurar doenças associadas\n                            </Button>\n            }\n            {\n                renderDiseases(diseases)\n            }\n            <LoadContainer>\n                <Spinner \n                    size={20}\n                    color={\"#446df6\"}\n                    loading={loading}\n                />\n            </LoadContainer>\n        </div>\n    )\n}\n\nexport default Home\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Home from './pages/Home';\nimport reportWebVitals from './reportWebVitals';\n\nrequire('dotenv').config()\n\nReactDOM.render(\n  <Home />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}